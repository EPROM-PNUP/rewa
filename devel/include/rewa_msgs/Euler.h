// Generated by gencpp from file rewa_msgs/Euler.msg
// DO NOT EDIT!


#ifndef REWA_MSGS_MESSAGE_EULER_H
#define REWA_MSGS_MESSAGE_EULER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rewa_msgs
{
template <class ContainerAllocator>
struct Euler_
{
  typedef Euler_<ContainerAllocator> Type;

  Euler_()
    : r(0.0)
    , p(0.0)
    , y(0.0)  {
    }
  Euler_(const ContainerAllocator& _alloc)
    : r(0.0)
    , p(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef double _r_type;
  _r_type r;

   typedef double _p_type;
  _p_type p;

   typedef double _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::rewa_msgs::Euler_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rewa_msgs::Euler_<ContainerAllocator> const> ConstPtr;

}; // struct Euler_

typedef ::rewa_msgs::Euler_<std::allocator<void> > Euler;

typedef boost::shared_ptr< ::rewa_msgs::Euler > EulerPtr;
typedef boost::shared_ptr< ::rewa_msgs::Euler const> EulerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rewa_msgs::Euler_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rewa_msgs::Euler_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rewa_msgs::Euler_<ContainerAllocator1> & lhs, const ::rewa_msgs::Euler_<ContainerAllocator2> & rhs)
{
  return lhs.r == rhs.r &&
    lhs.p == rhs.p &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rewa_msgs::Euler_<ContainerAllocator1> & lhs, const ::rewa_msgs::Euler_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rewa_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rewa_msgs::Euler_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rewa_msgs::Euler_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rewa_msgs::Euler_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rewa_msgs::Euler_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rewa_msgs::Euler_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rewa_msgs::Euler_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rewa_msgs::Euler_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5585e6b09b13f56ed964334fed50470";
  }

  static const char* value(const ::rewa_msgs::Euler_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5585e6b09b13f56ULL;
  static const uint64_t static_value2 = 0xed964334fed50470ULL;
};

template<class ContainerAllocator>
struct DataType< ::rewa_msgs::Euler_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rewa_msgs/Euler";
  }

  static const char* value(const ::rewa_msgs::Euler_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rewa_msgs::Euler_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 r\n"
"float64 p\n"
"float64 y\n"
;
  }

  static const char* value(const ::rewa_msgs::Euler_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rewa_msgs::Euler_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.r);
      stream.next(m.p);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Euler_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rewa_msgs::Euler_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rewa_msgs::Euler_<ContainerAllocator>& v)
  {
    s << indent << "r: ";
    Printer<double>::stream(s, indent + "  ", v.r);
    s << indent << "p: ";
    Printer<double>::stream(s, indent + "  ", v.p);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REWA_MSGS_MESSAGE_EULER_H
