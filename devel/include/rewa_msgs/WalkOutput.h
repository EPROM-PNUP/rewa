// Generated by gencpp from file rewa_msgs/WalkOutput.msg
// DO NOT EDIT!


#ifndef REWA_MSGS_MESSAGE_WALKOUTPUT_H
#define REWA_MSGS_MESSAGE_WALKOUTPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rewa_msgs/LegJoint.h>
#include <rewa_msgs/LegJoint.h>

namespace rewa_msgs
{
template <class ContainerAllocator>
struct WalkOutput_
{
  typedef WalkOutput_<ContainerAllocator> Type;

  WalkOutput_()
    : left()
    , right()  {
    }
  WalkOutput_(const ContainerAllocator& _alloc)
    : left(_alloc)
    , right(_alloc)  {
  (void)_alloc;
    }



   typedef  ::rewa_msgs::LegJoint_<ContainerAllocator>  _left_type;
  _left_type left;

   typedef  ::rewa_msgs::LegJoint_<ContainerAllocator>  _right_type;
  _right_type right;





  typedef boost::shared_ptr< ::rewa_msgs::WalkOutput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rewa_msgs::WalkOutput_<ContainerAllocator> const> ConstPtr;

}; // struct WalkOutput_

typedef ::rewa_msgs::WalkOutput_<std::allocator<void> > WalkOutput;

typedef boost::shared_ptr< ::rewa_msgs::WalkOutput > WalkOutputPtr;
typedef boost::shared_ptr< ::rewa_msgs::WalkOutput const> WalkOutputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rewa_msgs::WalkOutput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rewa_msgs::WalkOutput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rewa_msgs::WalkOutput_<ContainerAllocator1> & lhs, const ::rewa_msgs::WalkOutput_<ContainerAllocator2> & rhs)
{
  return lhs.left == rhs.left &&
    lhs.right == rhs.right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rewa_msgs::WalkOutput_<ContainerAllocator1> & lhs, const ::rewa_msgs::WalkOutput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rewa_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rewa_msgs::WalkOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rewa_msgs::WalkOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rewa_msgs::WalkOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rewa_msgs::WalkOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rewa_msgs::WalkOutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rewa_msgs::WalkOutput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rewa_msgs::WalkOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ad5775b0d561da386890fe8cd014165";
  }

  static const char* value(const ::rewa_msgs::WalkOutput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ad5775b0d561da3ULL;
  static const uint64_t static_value2 = 0x86890fe8cd014165ULL;
};

template<class ContainerAllocator>
struct DataType< ::rewa_msgs::WalkOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rewa_msgs/WalkOutput";
  }

  static const char* value(const ::rewa_msgs::WalkOutput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rewa_msgs::WalkOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rewa_msgs/LegJoint left\n"
"rewa_msgs/LegJoint right\n"
"\n"
"================================================================================\n"
"MSG: rewa_msgs/LegJoint\n"
"rewa_msgs/Euler hip\n"
"rewa_msgs/Euler knee\n"
"rewa_msgs/Euler ankle\n"
"\n"
"================================================================================\n"
"MSG: rewa_msgs/Euler\n"
"float64 r\n"
"float64 p\n"
"float64 y\n"
;
  }

  static const char* value(const ::rewa_msgs::WalkOutput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rewa_msgs::WalkOutput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left);
      stream.next(m.right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WalkOutput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rewa_msgs::WalkOutput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rewa_msgs::WalkOutput_<ContainerAllocator>& v)
  {
    s << indent << "left: ";
    s << std::endl;
    Printer< ::rewa_msgs::LegJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    s << std::endl;
    Printer< ::rewa_msgs::LegJoint_<ContainerAllocator> >::stream(s, indent + "  ", v.right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REWA_MSGS_MESSAGE_WALKOUTPUT_H
